{"version":3,"file":"OpenChannelListProvider-31d16d2a.js","sources":["../../src/smart-components/OpenChannelList/context/OpenChannelListInterfaces.ts","../../src/smart-components/OpenChannelList/context/dux/actionTypes.ts","../../src/smart-components/OpenChannelList/context/dux/reducer.ts","../../src/smart-components/OpenChannelList/context/dux/initialState.ts","../../src/smart-components/OpenChannelList/context/hooks/useFetchNextCallback.ts","../../src/smart-components/OpenChannelList/context/hooks/createChannelListQuery.ts","../../src/smart-components/OpenChannelList/context/hooks/useSetupOpenChannelList.ts","../../src/smart-components/OpenChannelList/context/hooks/useRefreshOpenChannelList.ts","../../src/smart-components/OpenChannelList/context/OpenChannelListProvider.tsx"],"sourcesContent":["import { OpenChannel } from '@sendbird/chat/openChannel';\nimport { Dispatch } from 'react';\nimport { Logger } from '../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from './dux/actionTypes';\nimport { FetchNextCallbackType } from './hooks/useFetchNextCallback';\n\nexport interface UserFilledOpenChannelListQuery {\n  // https://sendbird.com/docs/chat/v4/javascript/ref/interfaces/_sendbird_chat_openChannel.OpenChannelListQueryParams.html\n  customTypes?: Array<string>;\n  includeFrozen?: boolean;\n  includeMetaData?: boolean;\n  limit?: number;\n  nameKeyword?: string;\n  urlKeyword?: string;\n}\n\nexport enum OpenChannelListFetchingStatus {\n  EMPTY = 'EMPTY',\n  FETCHING = 'FETCHING',\n  DONE = 'DONE',\n  ERROR = 'ERROR',\n}\n\nexport type OnOpenChannelSelected = (channel: OpenChannel, e?: React.MouseEvent<HTMLDivElement | unknown>) => void;\nexport type OpenChannelListDispatcherType = Dispatch<{ type: OpenChannelListActionTypes, payload: any }>;\n\nexport interface OpenChannelListProviderProps {\n  className?: string;\n  children?: React.ReactElement;\n  queries?: { openChannelListQuery?: UserFilledOpenChannelListQuery };\n  onChannelSelected?: OnOpenChannelSelected;\n}\n\nexport interface OpenChannelListProviderInterface extends OpenChannelListProviderProps {\n  logger: Logger;\n  currentChannel: OpenChannel;\n  allChannels: Array<OpenChannel>;\n  fetchingStatus: OpenChannelListFetchingStatus;\n  customOpenChannelListQuery?: UserFilledOpenChannelListQuery;\n  fetchNextChannels: FetchNextCallbackType;\n  refreshOpenChannelList: () => void;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n","enum OpenChannelListActionTypes {\n  // actions\n  INIT_OPEN_CHANNEL_LIST_START = 'INIT_OPEN_CHANNEL_LIST_START',\n  INIT_OPEN_CHANNEL_LIST_SUCCESS = 'INIT_OPEN_CHANNEL_LIST_SUCCESS',\n  INIT_OPEN_CHANNEL_LIST_FAILURE = 'INIT_OPEN_CHANNEL_LIST_FAILURE',\n  RESET_OPEN_CHANNEL_LIST = 'RESET_OPEN_CHANNEL_LIST',\n  FETCH_OPEN_CHANNEL_LIST_START = 'FETCH_OPEN_CHANNEL_LIST_START',\n  FETCH_OPEN_CHANNEL_LIST_SUCCESS = 'FETCH_OPEN_CHANNEL_LIST_SUCCESS',\n  FETCH_OPEN_CHANNEL_LIST_FAILURE = 'FETCH_OPEN_CHANNEL_LIST_FAILURE',\n  CREATE_OPEN_CHANNEL = 'CREATE_OPEN_CHANNEL',\n  SET_CURRENT_OPEN_CHANNEL = 'SET_CURRENT_OPEN_CHANNEL',\n  UPDATE_OPEN_CHANNEL_LIST_QUERY = 'UPDATE_OPEN_CHANNEL_LIST_QUERY',\n  UPDATE_OPEN_CHANNEL = 'UPDATE_OPEN_CHANNEL',\n}\n\nexport default OpenChannelListActionTypes;\n","import { OpenChannelListFetchingStatus } from '../OpenChannelListInterfaces';\nimport actionTypes from './actionTypes';\nimport { OpenChannelListInitialInterface } from './initialState';\n\nexport default function reducer(\n  state: OpenChannelListInitialInterface,\n  action: { type: actionTypes, payload: any },\n): OpenChannelListInitialInterface {\n  switch (action.type) {\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_START: {\n      return {\n        ...state,\n        fetchingStatus: OpenChannelListFetchingStatus.FETCHING,\n      };\n    }\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS: {\n      const channelList = action.payload;\n      return {\n        ...state,\n        allChannels: channelList,\n        fetchingStatus: channelList.length > 0\n          ? OpenChannelListFetchingStatus.DONE\n          : OpenChannelListFetchingStatus.EMPTY,\n      };\n    }\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE: {\n      return {\n        ...state,\n        allChannels: [],\n        fetchingStatus: OpenChannelListFetchingStatus.ERROR,\n      };\n    }\n    case actionTypes.RESET_OPEN_CHANNEL_LIST: {\n      return {\n        ...state,\n        allChannels: [],\n        fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n      };\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_START: {\n      return state;\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_SUCCESS: {\n      return {\n        ...state,\n        allChannels: [...state.allChannels, ...action.payload],\n      };\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_FAILURE: {\n      return state;\n    }\n    case actionTypes.CREATE_OPEN_CHANNEL: {\n      return {\n        ...state,\n        currentChannel: action.payload,\n        allChannels: [action.payload, ...state.allChannels],\n      };\n    }\n    case actionTypes.SET_CURRENT_OPEN_CHANNEL: {\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    }\n    case actionTypes.UPDATE_OPEN_CHANNEL_LIST_QUERY: {\n      return {\n        ...state,\n        channelListQuery: action?.payload,\n      };\n    }\n    case actionTypes.UPDATE_OPEN_CHANNEL: {\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel?.url === action.payload?.url ? action.payload : channel\n        )),\n        currentChannel: (state.currentChannel?.url === action?.payload?.url)\n          ? state.currentChannel\n          : action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { OpenChannel, OpenChannelListQuery } from \"@sendbird/chat/openChannel\";\nimport { OpenChannelListFetchingStatus } from \"../OpenChannelListInterfaces\";\n\nexport interface OpenChannelListInitialInterface {\n  allChannels: Array<OpenChannel>;\n  currentChannel: OpenChannel;\n  fetchingStatus: OpenChannelListFetchingStatus;\n  channelListQuery: OpenChannelListQuery;\n}\n\nexport default {\n  allChannels: [],\n  currentChannel: null,\n  fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n  channelListQuery: null,\n} as OpenChannelListInitialInterface;\n","import { useCallback } from \"react\";\n\nimport { SendbirdError } from \"@sendbird/chat\";\nimport { OpenChannel, OpenChannelListQuery } from \"@sendbird/chat/openChannel\";\n\nimport { Logger } from \"../../../../lib/SendbirdState\";\nimport OpenChannelListActionTypes from \"../dux/actionTypes\";\nimport { OpenChannelListDispatcherType } from \"../OpenChannelListInterfaces\";\n\ninterface DynamicParams {\n  sdkInitialized: boolean;\n  openChannelListQuery: OpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nexport type FetchNextCallbackType = (callback: (channels?: Array<OpenChannel>, err?: SendbirdError) => void) => void;\n\nfunction useFetchNextCallback(\n  {\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): FetchNextCallbackType {\n  return useCallback((callback) => {\n    if (sdkInitialized && openChannelListQuery?.hasNext) {\n      logger.info('OpenChannelList|useFetchNextCallback : Fetch channels');\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_START,\n        payload: null,\n      });\n      openChannelListQuery.next()\n        .then((channelList) => {\n          callback(channelList, null);\n          logger.info('OpenChannelList|useFetchNextCallback: Succeeded fetching channels', channelList);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_SUCCESS,\n            payload: channelList,\n          });\n        })\n        .catch((err) => {\n          callback(null, err);\n          logger.error('OpenChannelList|useFetchNextCallback: Failed fetching channels', err);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_FAILURE,\n            payload: null,\n          });\n        });\n    } else {\n      logger.info('OpenChannelList|useFetchNextCallback : There is no more channels');\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useFetchNextCallback;\n","import { OpenChannelListQuery, OpenChannelListQueryParams, SendbirdOpenChat } from \"@sendbird/chat/openChannel\";\nimport { Logger } from \"../../../../lib/SendbirdState\";\nimport OpenChannelListActionTypes from \"../dux/actionTypes\";\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\n\ninterface createChannelListQueryProps {\n  sdk: SendbirdOpenChat;\n  logMessage: string;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction createChannelListQuery({\n  sdk,\n  logMessage,\n  openChannelListQuery,\n  logger,\n  openChannelListDispatcher,\n}: createChannelListQueryProps): OpenChannelListQuery {\n  const params = {} as OpenChannelListQueryParams;\n  params.limit = 20;\n  params.includeFrozen = true;\n  if (openChannelListQuery) {\n    Object.keys(openChannelListQuery).forEach((key) => {\n      params[key] = openChannelListQuery[key];\n    });\n  }\n  const channelListQuery = sdk?.openChannel?.createOpenChannelListQuery?.(params);\n  logger.info(logMessage, channelListQuery);\n  openChannelListDispatcher({\n    type: OpenChannelListActionTypes.UPDATE_OPEN_CHANNEL_LIST_QUERY,\n    payload: channelListQuery,\n  });\n  return channelListQuery;\n}\n\nexport default createChannelListQuery;\n","import { useEffect } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\nimport createChannelListQuery from './createChannelListQuery';\n\ninterface DynamicParams {\n  sdk: SendbirdChat & SendbirdOpenChat;\n  sdkInitialized: boolean;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction useSetupOpenChannelList(\n  {\n    sdk,\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    if (sdkInitialized) {\n      if (sdk?.openChannel) {\n        if (sdk?.openChannel?.createOpenChannelListQuery) {\n          logger.info('OpenChannelList|useSetupOpenChannelList: Setup OpenChannelList', { sdkInitialized });\n          const channelListQuery = createChannelListQuery({\n            sdk,\n            logger,\n            openChannelListQuery,\n            openChannelListDispatcher,\n            logMessage: 'OpenChannelList|useSetupOpenChannelList: Succeeded create channelListQuery',\n          });\n\n          if (channelListQuery?.hasNext) {\n            logger.info('OpenChannelList|useSetupOpenChannelList: Fetch channels');\n            openChannelListDispatcher({\n              type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_START,\n              payload: null,\n            });\n            channelListQuery.next()\n              .then((channelList) => {\n                logger.info('OpenChannelList|useSetupOpenChannelList: Succeeded fetching channels', channelList);\n                openChannelListDispatcher({\n                  type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS,\n                  payload: channelList,\n                });\n              })\n              .catch((err) => {\n                logger.error('OpenChannelList|useSetupOpenChannelList: Failed fetching channels', err);\n                openChannelListDispatcher({\n                  type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE,\n                  payload: null,\n                });\n              });\n          } else {\n            logger.info('OpenChannelList|useSetupOpenChannelList: There is no more channels');\n          }\n        } else {\n          logger.warning('OpenChannelList|useSetupOpenChannelList: createOpenChannelListQuery is not included in the openChannel', sdk.openChannel);\n        }\n      } else {\n        logger.warning('OpenChannelList|useSetupOpenChannelList: openChannel is not included in the Chat SDK', sdk);\n      }\n    } else {\n      logger.info('OpenChannelList|useSetupOpenChannelList: Reset OpenChannelList', { sdkInitialized });\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.RESET_OPEN_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useSetupOpenChannelList;\n","import { useCallback } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport createChannelListQuery from './createChannelListQuery';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  sdk: SendbirdChat & SendbirdOpenChat;\n  sdkInitialized: boolean;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction useRefreshOpenChannelList(\n  {\n    sdk,\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (!sdkInitialized) {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: Reset OpenChannelList', { sdkInitialized });\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.RESET_OPEN_CHANNEL_LIST,\n        payload: null,\n      });\n      return;\n    }\n    if (!sdk?.openChannel) {\n      logger.warning('OpenChannelList|useRefreshOpenChannelList: openChannel is not included in the Chat SDK', sdk);\n      return;\n    }\n    if (!sdk?.openChannel?.createOpenChannelListQuery) {\n      logger.warning('OpenChannelList|useRefreshOpenChannelList: createOpenChannelListQuery is not included in the openChannel', sdk.openChannel);\n      return;\n    }\n\n    logger.info('OpenChannelList|useRefreshOpenChannelList: Setup OpenChannelList', { sdkInitialized });\n\n    const channelListQuery = createChannelListQuery({\n      sdk,\n      logger,\n      openChannelListQuery,\n      openChannelListDispatcher,\n      logMessage: 'OpenChannelList|useRefreshOpenChannelList: Succeeded create channelListQuery',\n    });\n\n    if (channelListQuery.hasNext) {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: Fetch channels');\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_START,\n        payload: null,\n      });\n      channelListQuery.next()\n        .then((channelList) => {\n          logger.info('OpenChannelList|useRefreshOpenChannelList: Succeeded fetching channels', channelList);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS,\n            payload: channelList,\n          });\n        })\n        .catch((err) => {\n          logger.error('OpenChannelList|useRefreshOpenChannelList: Failed fetching channels', err);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE,\n            payload: null,\n          });\n        });\n    } else {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: There is no more channels');\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useRefreshOpenChannelList;\n","import React, { useContext, useReducer, useMemo, useEffect } from 'react';\n\nimport * as pubSubTopics from '../../../lib/pubSub/topics';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport openChannelListReducer from './dux/reducer';\nimport openChannelListInitialState, { OpenChannelListInitialInterface } from './dux/initialState';\nimport {\n  OpenChannelListFetchingStatus,\n  OpenChannelListProviderProps,\n  OpenChannelListProviderInterface,\n  OpenChannelListDispatcherType,\n} from './OpenChannelListInterfaces';\nimport useFetchNextCallback from './hooks/useFetchNextCallback';\nimport useSetupOpenChannelList from './hooks/useSetupOpenChannelList';\nimport useRefreshOpenChannelList from './hooks/useRefreshOpenChannelList';\nimport OpenChannelListActionTypes from './dux/actionTypes';\n\nconst OpenChannelListContext = React.createContext<OpenChannelListProviderInterface | null>({\n  onChannelSelected: null,\n  currentChannel: null,\n  allChannels: [],\n  fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n  customOpenChannelListQuery: {},\n  fetchNextChannels: null,\n  refreshOpenChannelList: null,\n  openChannelListDispatcher: null,\n  logger: null,\n});\n\nexport function useOpenChannelListContext(): OpenChannelListProviderInterface {\n  const context: OpenChannelListProviderInterface = useContext(OpenChannelListContext);\n  return context;\n}\n\nexport const OpenChannelListProvider: React.FC<OpenChannelListProviderProps> = ({\n  className,\n  children,\n  queries,\n  onChannelSelected,\n}: OpenChannelListProviderProps): React.ReactElement => {\n  // props\n  const { stores, config } = useSendbirdStateContext();\n  const { logger, pubSub } = config;\n  const sdk = stores?.sdkStore?.sdk || null;\n  const sdkInitialized = stores?.sdkStore?.initialized || false;\n  const customOpenChannelListQuery = useMemo(() => {\n    return queries?.openChannelListQuery || null;\n  }, [queries?.openChannelListQuery]);\n\n  // dux\n  const [openChannelListStore, openChannelListDispatcher]: [OpenChannelListInitialInterface, OpenChannelListDispatcherType] = useReducer(\n    openChannelListReducer,\n    openChannelListInitialState,\n  );\n  const {\n    allChannels,\n    currentChannel,\n    fetchingStatus,\n    channelListQuery,\n  } = openChannelListStore;\n\n  // Initialize\n  useSetupOpenChannelList({\n    sdk,\n    sdkInitialized,\n    openChannelListQuery: customOpenChannelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  // Events & PubSub\n  useEffect(() => {\n    const subscriber = pubSub?.subscribe ? new Map() : null;\n    subscriber?.set(\n      pubSubTopics.UPDATE_OPEN_CHANNEL,\n      pubSub?.subscribe(pubSubTopics.UPDATE_OPEN_CHANNEL, (channel) => {\n        openChannelListDispatcher({\n          type: OpenChannelListActionTypes.UPDATE_OPEN_CHANNEL,\n          payload: channel,\n        });\n      }),\n    );\n    return () => {\n      subscriber?.forEach((s) => {\n        try { s.remove() } catch { }\n      });\n    };\n  }, [sdkInitialized, pubSub]);\n\n  // Fetch next channels by scroll event\n  const fetchNextChannels = useFetchNextCallback({\n    sdkInitialized: sdkInitialized,\n    openChannelListQuery: channelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  // Refresh channel list by click event of 'refresh button'\n  const refreshOpenChannelList = useRefreshOpenChannelList({\n    sdk,\n    sdkInitialized,\n    openChannelListQuery: customOpenChannelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  return (\n    <OpenChannelListContext.Provider\n      value={{\n        // props\n        onChannelSelected: onChannelSelected,\n        customOpenChannelListQuery: customOpenChannelListQuery,\n        // interface\n        logger: logger,\n        currentChannel: currentChannel,\n        allChannels: allChannels,\n        fetchingStatus: fetchingStatus,\n        fetchNextChannels: fetchNextChannels,\n        refreshOpenChannelList: refreshOpenChannelList,\n        openChannelListDispatcher: openChannelListDispatcher,\n      }}\n    >\n      <div className={`sendbird-open-channel-list ${className}`}>\n        {children}\n      </div>\n    </OpenChannelListContext.Provider>\n  );\n}\n\nexport default {\n  OpenChannelListProvider,\n  useOpenChannelListContext,\n};\n"],"names":["OpenChannelListFetchingStatus","OpenChannelListActionTypes","reducer","state","action","type","actionTypes","INIT_OPEN_CHANNEL_LIST_START","__assign","fetchingStatus","FETCHING","INIT_OPEN_CHANNEL_LIST_SUCCESS","channelList","payload","allChannels","length","DONE","EMPTY","INIT_OPEN_CHANNEL_LIST_FAILURE","ERROR","RESET_OPEN_CHANNEL_LIST","FETCH_OPEN_CHANNEL_LIST_START","FETCH_OPEN_CHANNEL_LIST_SUCCESS","__spreadArray","FETCH_OPEN_CHANNEL_LIST_FAILURE","CREATE_OPEN_CHANNEL","currentChannel","SET_CURRENT_OPEN_CHANNEL","UPDATE_OPEN_CHANNEL_LIST_QUERY","channelListQuery","UPDATE_OPEN_CHANNEL","map","channel","url","_a","_b","useFetchNextCallback","sdkInitialized","openChannelListQuery","logger","openChannelListDispatcher","useCallback","callback","hasNext","info","next","then","catch","err","error","createChannelListQuery","sdk","logMessage","params","limit","includeFrozen","Object","keys","forEach","key","_c","openChannel","createOpenChannelListQuery","call","useSetupOpenChannelList","useEffect","warning","useRefreshOpenChannelList","OpenChannelListContext","React","createContext","onChannelSelected","customOpenChannelListQuery","fetchNextChannels","refreshOpenChannelList","useOpenChannelListContext","context","useContext","OpenChannelListProvider","className","children","queries","_d","useSendbirdStateContext","stores","config","pubSub","sdkStore","initialized","useMemo","_e","useReducer","openChannelListReducer","openChannelListInitialState","openChannelListStore","subscriber","subscribe","Map","set","pubSubTopics","s","remove","concat"],"mappings":"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"}